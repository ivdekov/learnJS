update to reflect info from link below

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type


Types - representations for values. 

JavaScript is a dynamically typed language, meaning the type will get determined automatically when the program is being processed and variables can hold any type of value at any time, vs statically typed, where the variable must be enforced with a type at creation, such as a string or number. Changes between types is known as coercion.

	ex. var number = 10 // number is of the type number
		number = ’10’ // number has been coerced and is now of the type string
	// note that when using operands sometimes coercion happens automatically


	var foo = 42;    // foo is now a Number
	var foo = "bar"; // foo is now a String
	var foo = true;  // foo is now a Boolean

	


We will be using the 'typeof' operator to discuss the different types available in JS below.

typeof: The typeof operator returns a string indicating the type of the unevaluated operand.

// syntax
typeof operand

operand is an expression representing the object or primitive whose type is to be returned.




Add examples to include typeof below




String - simply a way to represent text. values are surrounded with either single or double quotes, as per your preference.
	The preferred way of creating strings is with a literal representation
	var myString = “Isn’t this cool!”;

	Alternatively you could do it this way, but it is not preferred.
	var myString = new String(“This is not quite as cool.”);

	You can coerce something to a string like with the following syntax: 
	var num = 5; // type number
	num = String(num); // type string
	
	You could also use the method num.toString(); // preferred
	

Number - is anything 0-9 and also the value NaN, which ironically stands for 'Not a Number.' Numbers do not have quotes around them.
	var number = 8;

	Again, you could create a number with the 'new' keyword, but don't.
	If you want to coerce a string to a number you can use the Number() function to convert an object argument to a number that represents the object's value. If the value cannot be converted to a legal number, NaN is returned.


	var str = "5" // type string
	str = Number(str); // 5 ... str is now the number 5
	Number("abc"); // NaN


Boolean - A boolean very simply represents 'true' or 'false'. You will commonly see these used is an if statement context ( more on that later ).
	if (5 > 4) { // this evaluates to a boolean
		// do something
		// since the above evaluated to 'true' this did something
	}


Null & Undefined

	A value is undefined if it has been declared but not been defined a value or has been explicitly set to the value 'undefined'. Undefined is an actual type of itself.
		var x;
		console.log(x); // undefined

	Nulls an assignment value. It can be assigned to a variable as a representation of no value. The caveat: it actually is of the type 'object'.
	 var x = null; 
	 console.log(x); // null

Object - array, objects, functions are all in this category.

	Objects - objects are much like variables in that they are like containers for data values. The difference with objects is that they can contain multiple values, and are written as name:value pairs, also commonly referred to as key:value. An object in programming is often representative of something that could be an object in real life.

		// let's create a person object
		var person = {
			firstName: "John",
			lastName: "Doe",
			age: 50
		};

		Object property values can be accessed two different ways.

		dot notation:
			person.firstName // 'John'

		bracket notation:
			person[firstName] // 'John'

		Dot notation is preferred, but sometimes bracket notation is the only option, such as with special characters, and most commonly, if the value is a variable

	Arrays - An array is an object that holds values not particularly in named properties/keys, but rather in numerically indexed positions. Example:
		var arr = [
			"hi there",
			false,
			55
		];

	We access the array values by index ( note the index starts at zero ):
		arr[0] // "hi there"
		arr[1] // false
		arr[2] // 55

	Functions - is the type object but returns typeof function. A JavaScript function is a block of code designed to perform a particular task, and is executed when "something" invokes it (calls it). Functions help to keep our code DRY and help with readability. If you find yourself repeating code you should probably be using a function. Here is the syntax:

		function name(parameter1, parameter2, parameter3) { // here we are declaring a function called 'name'
    		// code to be executed
		}

		name(1,2,3); // here we call the function name and pass the values 1,2,3 as arguments for the parameters. 

		// declare sum
		function sum (a, b) {
			return a + b;
		}

		// call/invoke sum
		sum(5, 10); // 15

Symbol (ES6) - A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type. We will not be talking about Symbols at this time or for quite awhile.
	Symbol([description]) // syntax for creating a symbol
	Symbol("foo") // new symbol created with the description foo





caveats:

var num = 5
    , str    = ‘5’;

if ( num == str ) console.log(‘true’) // true
else console.log(‘false’)

if ( num === str ) console.log(‘true’)
else console.log(‘false’) // false

num + str = ’55'

console.log(typeof null) // object
