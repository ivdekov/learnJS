lastIndexOf(): returns the index for the last occurrence of a given search value in a string. This is the same as indexOf() but starts at the end of a string.

// syntax
str.lastIndexOf(searchValue[, fromIndex])

// example
var str = 'howler monkeys';
str.lastIndexOf('e') // 11



slice(): extracts a section of a string and returns a new string. Changes in one string do not affect the other string. It will extract up to, but not including, the end slice.

// syntax
str.slice(beginSlice[, endSlice])

// parameters
beginSlice: The zero-based index at which to begin extraction. If negative, it is treated as sourceLength + beginSlice where sourceLength is the length of the string (for example, if beginSlice is -3 it is treated as sourceLength - 3).

endSlice: Optional. The zero-based index at which to end extraction. If omitted, slice() extracts to the end of the string. If negative, it is treated as sourceLength + endSlice where sourceLength is the length of the string (for example, if endSlice is -3 it is treated as sourceLength - 3).


// example
str.slice(1, 4) // extracts the second character through the fourth character (characters indexed 1, 2, and 3).

As an example, str.slice(2, -1) extracts the third character through the second to last character in the string.


// lets use slice to create us a new string
var str = 'Portland is a cool beans place to be.';
var str2 = str.slice(0, 8); // Portland

What happened here is that we started at the 0 index of str, which is the first character, and then extracted 8 characters from that point on and stored them in the variable str2. Let's see what happens if we omit the endSlice parameter
str2 = str.slice(8) // ' is a cool beans place to be.'

We can see that the 8th index was the space between 'Portland' and 'is' and that it extracted everything from that point to the end of the string, including the space. Let's try negative values now.

var str = 'I like to eat burritos.';
var str2 = str.slice(-9) // 'burritos.' Starting with the last index count back 9
var str2 = str.slice(-9, -1); // 'burritos' ... notice the period was trimmed. Be careful. Logically one might think that -1 is the last index value, but it's actually the second to last. It goes backwards one index from last index. starting at 9 indexes from the end, go til one index from end.


substr(): returns the characters in a string beginning at the specified location through the specified number of characters.

// syntax
str.substr(start[, length])

// parameters
start: Location at which to begin extracting characters. If a negative number is given, it is treated as strLength + start where strLength is the length of the string (for example, if start is -3 it is treated as strLength - 3.)

length: Optional. The number of characters to extract.

We can virtually do the same here with substr() as we did with slice().
var str = 'Portland is a cool beans place to be.';
var str2 = str.substr(0, 8); // Portland

str2 = str.substr(8); // ' is a cool beans place to be.'

var str = 'I like to eat burritos.';
var str2 = str.substr(-9); // 'burritos.'
var str2 = str.substr(-9, -1); // ''. empty string

The reason the last one is an emptry string is because we are not extracting to an index, but rather a total count of characters. Here we can really understand the slight different way of thinking when using substr(). substr() extracts a length of characters by a given length value, where slice() extracts a length of characters given by indices.


substring() method returns a subset of a string between one index and another, or through the end of the string.

// syntax 
str.substring(indexStart[, indexEnd])

indexStart: An integer between 0 and the length of the string, specifying the offset into the string of the first character to include in the returned substring.

indexEnd: Optional. An integer between 0 and the length of the string, which specifies the offset into the string of the first character not to include in the returned substring.

var str = 'Portland is a cool beans place to be.';
var str2 = str.substring(0, 8); // Portland

str2 = str.substring(8); // ' is a cool beans place to be.'

var str = 'I like to eat burritos.';
var str2 = str.substring(-9); // 'I like to eat burritos.'
var str2 = str.substring(-9, -1); // ''. empty string

// using .length property
str2 = str.substring(str.length - 9) // 'burritos.'


So, what gives?! Talk about how substr, substring, and split, and the caveats. http://www.bennadel.com/blog/2159-using-slice-substring-and-substr-in-javascript.htm
















search(): executes a search for a match between a regular expression and this String object. If successful it returns the index of the first match of the regular expression inside the string. Otherwise, it returns -1.

// syntax
search(regex)


Talk about how match() could be used for more info, but search is faster.



The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.




I'm leaving replace blank for now. I think replace and match should be talked about later because they are a bit more complicated and deal with regex, though replace does work with strings, we would be remiss to not go deeper into this one.







match(): retrieves the matches when matching a string against a regular expression, and returns them in an array or null if there were no matches. We have not covered regular expressions yet, and will have to do a dive later on. They can be complicated.

// syntax
str.match(regexp)


See MSDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match

In the following example, match() is used to find 'Chapter' followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the i flag so that case will be ignored.

var str = 'For more information, see Chapter 3.4.5.1';
var re = /(chapter \d+(\.\d)*)/i;
var found = str.match(re);

console.log(found);

// logs ['Chapter 3.4.5.1', 'Chapter 3.4.5.1', '.1']

// 'Chapter 3.4.5.1' is the first match and the first value 
// remembered from `(Chapter \d+(\.\d)*)`.

// '.1' is the last value remembered from `(\.\d)`.



The following example demonstrates the use of the global and ignore case flags with match(). All letters A through E and a through e are returned, each its own element in the array.

var str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
var regexp = /[A-E]/gi;
var matches_array = str.match(regexp);

console.log(matches_array);
// ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']






