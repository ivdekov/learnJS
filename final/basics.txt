Welcome back! Glad to have you. Yesterday we wrote our line of code usng console.log(), which is used to print things and is really useful in testing. You will be seeing and using this a lot. Today we will be jumping in JS language basics.

Our schedule includes:

- Comments
- Statements
- Variables
- Operators

The majority of code you write in JavaScript, or any other language for that matter, is in the form of statements, and while statements are uniform to programming, it is important to understand how they are written using JavaScript. So what is a statement? In a computer language, a group of words, numbers, and operators that performs a specific task is a statement. Essentially statements are instructions to be executed.

Here are some Statements & Declarations. More can be found at: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements
break - 	    Terminates a switch or a loop
continue - 	    Jumps out of the current iteration of a loop
debugger - 	    Stops the execution of JavaScript, and calls (if available) the debugging function  
do ... while - 	Executes a block of statements, and repeats the block, while a condition is true
while -         Creates a loop that executes a specified statement as long as the test condition evaluates to true.
for	-           Marks a block of statements to be executed, as long as a condition is true
for ... in      Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.
function -   	Declares a function
if ... else	-   Marks a block of statements to be executed, depending on a condition
return	-       Exits a function
switch	-       Marks a block of statements to be executed, depending on different cases
try ... catch - Implements error handling to a block of statements
throw -         throws a user defined exception
var	-           Declares a variable  

There's a lot here for now. No need to fret. One step at a time. We will learn them over time.


Comments - are great for explaining things in your code, can help remind you later what you were doing, and are extremely beneficial for others trying to figure out what’s going on. Comments will be interpreted as plain text, and not evaluated.

	Single line comments are denoted like so
		// my single line comment
	Multi line comments are denoted like so
		/* 
		This is 
		a multiple
		line comment
		*/

		
Variables - You use variables to store and retrieve values. The first time a variable appears is its declaration, where it is put into memory. Try to give your variables meaningful names to make it easy for other people to understand what your code does.

Let’s look at a simple statement
	
	var n = 2 + 2;

n is the variable and will be equal to 4. Variables are declared with the var keyword, and can be done a few different ways.

// A single declaration.
var num;  
// Multiple declarations with a single var keyword, separated by commas
var num, max, min;    
// Variable declaration and initialization in one statement.
var count = 0, amount = 100; 

// line returns do not matter
var house
  , brick
  , sticks;

If we do not set a value to a variable initially it will be set to ‘undefined’. In JavaScript, variable names (including function names) must be valid identifiers. An identifier must start with a-z, A-Z, $, or _. It can then contain any of those characters plus the numerals 0-9.

Camelcasing:

This is the naming convention JS developers use when naming things like variables. Since you can’t have spacing or hypens in your names and it may make sense to have multiple words in a name, best practice is to use camel case, which means the first word is lower case and all words after begin with a capital letter. Here’s an example:

	thisVariableIsInCamelCase = “I am a camel cased variable”;
	applesAndOranges = “fruits”;


Watch out for case. JavaScript is a case sensitive language, so be careful. 
	
	‘HOUSE’ is not equal to ‘house’



Sometimes you may want a variable to remain unchanged and constant, for example with some sort of secret key or password. The convention for this is to use all capital letters and separate words with underscores. Here is an example:

	var I_DO_NOT_CHANGE = “mySuperSecretPassword”;
	
The interesting thing with this is that the variable I_DO_NOT_CHANGE can actually be changed. This is just a convention, though with ES6 the ‘const’ keyword was added to create a read-only constant. Let’s take another look.

	var I_DO_ACTUALLY_CHANGE = ‘mySuperSecretPassword’;
	const I_DO_NOT_CHANGE = ‘holdSteady’;
	I_DO_ACTUALLY_CHANGE = ‘newPassword’;
	I_DO_NOT_CHANGE = ‘try to change me’;
	I_DO_ACTUALLY_CHANGE // ‘newPassword’
	I_DO_NOT_CHANGE // ‘holdSteady’
	
	Note const is part of the ES6 specification and there are some caveats when using ES6. To minimize compatibility issues and quirks, we will be focusing on the current ES5 specification until later.

Reserved Words: In JavaScript, some identifiers are reserved words and cannot be used as variables or function names. They will cause errors, and they will cause problems for you. Don't use them. Seriously! For a listing of up to date reserverd words, see link below.

http://www.w3schools.com/js/js_reserved.asp
http://javascript.about.com/library/blreserved.htm


So far we have been using semicolons to denote the end of an expression. These are optional, though we are going to recommend getting in the habit of using them if you are new to the language.




Operators - how we perform actions on variables or values. These are super important and useful, as you will be using them quite often in many different ways.
	
	+  -  *  /  =  %  ++  — +=  -=  *=  /=  ==  ===

	Assignment ( = )
		
		var number = 5;

	Math ( addition [+], subtraction [-], multiplication [*], division [/] )

		var sum = number + 5;

	Compound Assignment ( +=, -=, *=, /= ) this is a shortcut for combining math.

		number += 5 is the same as number = number + 5		

	Increment/Decrement ( ++, - - )

		number ++ is the same as number + 1

	Equality ( loose equals [==], strict equals [===], loose not equals [!=], 
	strict not equals [!==] )
		
		a == b
		More on this will be covered later when we go over types and values.

	Comparison ( <, >, <=, >= )

		number < sum

	Logical ( and [&&], or [||] )

		example: 

		do something if ‘a’ and ‘b’ are true or if ‘a’ or ‘b’ are true.

	Modulus ( % ) The modulus operator returns the division remainder.

		9 % 5 = 4 // 5 goes into 9 one time with a remainder of 4



I think that’s plenty to chew on for now. Keep practicing with declaring and setting variables, while also doing some basic math operations on them. See you tomorrow for types and values.
